@use 'sass:selector';
@use 'sass:string';
@import 'themes.scss';


@each $theme, $value in $themes {
  [data-theme="#{$theme}"] {
    body {
      background-color: map-get($value, backgroundColor);
    }
    .loader {
      background-color: map-get($value, headerColor);

      svg {
        fill: none;

        g path {
          stroke-width: 16;
          stroke: map-get($value, secondaryColor);
        }

        .ip-loader-circlebg {
        	stroke-width: 12;
          stroke: map-get($value, secondaryColor);
        }

        #ip-loader-circle {
        	stroke-width: 6;
          stroke: map-get($value, primaryColor);
        	transition: stroke-dashoffset 0.2s;
        }
      }
    }

    header {
      background-color: map-get($value, headerColor);
      nav label {
        border-color: map-get($value, primaryColor);
      }
    }

    h1, h2, main{
      color: map-get($value, secondaryColor);
    }

    form {
      input[type="submit"] {
        background-color: map-get($value, primaryColor);
        &:hover, &:active{
          background-color: map-get($value, secondaryColor);
        }
      }
    }

    footer {
      background-color: map-get($value, footerColor);
    }
    .revealer {
      background-color: map-get($value, headerColor);
    }
  }
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}



body {
  height: 100vh;
  width: 100vw;
  display: grid;
  grid-template-rows: repeat(12, 1fr);
  visibility: hidden;

  .loader {
    position: fixed;
    top: 0;
    left: 0;
    visibility: visible;
    height: 100vh;
    width: 100vw;
    z-index: 10;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content:space-around;

    #ip-loader-circle {
      	transition: stroke-dashoffset 0.2s;
    }
  }

  header {
    @media (max-width: 600px) {grid-row: 1/2;}
    grid-row: 1/2;
    display: grid;
    grid-template-columns: repeat(12, 1fr);
    //height: 48px;
    font-size: 24px;

    ul {
      grid-column: 2/7;
      display: flex;
      justify-content: flex-start;
      align-items: center;
      list-style: none;
    }
    nav {
      grid-column: 7/12;
      display: flex;
      justify-content: flex-end;
      align-items: center;

      a {
        padding: 4px;
      }
    }
  }

main {
  grid-row: 2/10;

  .page--current.page1 {
    height: 100%;
    display: grid;
    grid-template: repeat(12, 1fr)/ repeat(12, 1fr);

      h1 {
        grid-column: 2/12;
        grid-row: 1/2;
      }
      h2 {
        grid-column: 2/12;
        grid-row: 2/3;
      }
      form {
        grid-column: 2/12;
        grid-row: 4/6;
        //display: flex;
        //flex-direction: column;
        //justify-content: center;

        label {
          height: auto;
          padding: 10px 0px;

          input{
            width: 25%;
            transition: width 1s;
            transition-timing-function: cubic-bezier(0.25,0.1,0.25,1);

            &:focus {
              width: 70%
            }
          }
        }

        input[type="submit"] {
          //display: inline-block;
          padding: 15px 25px;
          height: auto;
          width: 96px;
          text-decoration: none;
          text-align: center;
          border-radius: 15px;
          box-shadow: 0 4px #999;

          &:active {
            box-shadow: 0 2px #666;
            transform: translateY(2px);
          }
        }
      }
      img {
        grid-column: 2/12;
        grid-row: 6/12;
        max-width: 100%;
        height: auto;
      }
    }
  .page--current.page2 {
    display: grid;
    div .slide-container {
      display: none;
    }
    .prev, .next {
      cursor: pointer;
      transform: translateY(-50%);
      width: 60px;
      height: 60px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 50%;
      color: white;
      font-size: 30px;
      background-color: rgba(0,0,0,0);
      transition: background-color 0.6s ease;
    }
  }
  }

  footer {
    grid-row: 11/13;
  }
}

body {
  main {
     .page--current.page {
       height: 100%;
       display: grid;
       grid-template: repeat(12, 1fr)/ repeat(12, 1fr);

       .carousel-container {
         grid-column: 2/12;
         grid-row: 2/11;
         display: flex;
         align-items: center;
         justify-content: space-between;
         align-items: center;

         .anim {
           animation-duration: 1s;
         }
         .slide-index {
           position:relative;
           top: 15px;
           padding: 15px;
           color: black;
         }
       }
        img {
         max-width: 100%;
         height: auto;
       }
       .prev {
         order: -1;
       }
       .prev:hover, .next:hover {
         background-color: rgba(0,0,0,0.5);
        }
    }
    .page {
      display: none;
    }
  }
}

fieldset {
  background-color: rgba(0, 0, 0, 0.1);
  border-radius: 9999px;
  border: 0;
  display: inline-flex;
  padding: 0;
  margin: 0px 10px;
  min-width: 60px;
  height: 24px;

  input[type=radio] {
    display: none;
    margin:0;
  }

  input:checked + label {
    background-color: #357edd;
    color: #fff;
  }

  label {
    cursor: pointer;
    padding: 8px 12px;
    background-color: white;
    border-style: solid;
    border-width: 1px;
    height: auto;
    width: auto;
  }

  label[for="default"] {
    border-radius: 9999px 0px 0px 9999px;
  }
  label[for="night"] {
    border-radius: 0px 9999px 9999px 0px;
  }
}

@keyframes animationTop {
  0% {transform: translate3d(0,0%,0);}
  35%,
  65% {transform: translate3d(0,100%,0);}
  100% {transform: translate3d(0,200%,0);}
}

@keyframes animationBot {
  0% {transform: translate3d(0,0%,0);}
  35%,
  65% {transform: translate3d(0,-100%,0);}
  100% {transform: translate3d(0,-200%,0);}
}

.revealer--animate {
  animation: animationTop 1.5s cubic-bezier(0.2, 1, 0.3, 1);
}

.revealer {
  //background-color: map-get(map-get($themes, 'default'), headerColor);
  width: 100vw;
  height: 100vh;
  position: absolute;
  bottom: 100%;
  z-index: 10;
}

@keyframes animDroite {
  from {transform: translate3d(0,0,0)}
  to {transform: translate3d(300%,0,0)}
}

@keyframes animGauche {
  from {transform: translate3d(0,0,0)}
  to {transform: translate3d(-300%,0,0)}
}
